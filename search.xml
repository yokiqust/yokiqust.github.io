<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title><![CDATA[TensorFlow Estimator简介]]></title>
      <url>/2017/11/06/TensorFlow-Estimator/</url>
      <content type="html"><![CDATA[<p>这篇文章主要是简单介绍TensorFlow的高阶API–Estimator，使用此API可以很大程度上简化机器学习的编程工作。<br><a id="more"></a></p>
<h1 id="Estimators"><a href="#Estimators" class="headerlink" title="Estimators"></a>Estimators</h1><p>Estimator中主要封装了以下操作：</p>
<ul>
<li>training</li>
<li>evaluation</li>
<li>prediction</li>
<li>export for serving<h2 id="Estimators的优点"><a href="#Estimators的优点" class="headerlink" title="Estimators的优点"></a>Estimators的优点</h2></li>
<li>可以在本地或者在分布式环境中运行基于Estimators的模型，而不用修改模型。</li>
<li>Estimators简化了模型开发者之间的分享实现</li>
<li>比起底层API，使用Estimators可以更简单的建立模型</li>
<li>Estimators本身是建立在tf.layers，可以简化定制</li>
<li>使用Estimators不必建立计算图  </li>
</ul>
<p>Estimator分为预设Estimator(Pre-made Estimators)和定制Estimator(Custom Estimators)</p>
<h1 id="Pre-made-Estimators"><a href="#Pre-made-Estimators" class="headerlink" title="Pre-made Estimators"></a>Pre-made Estimators</h1><p>预设Estimators能够使我们在更高的概念层面上开发。我们不用再担心建立计算图或者session，因为Estimators会为我们处理这些工作。另外，预设Estimators让我们做最小化的改变而改变模型进行实验。</p>
<h2 id="预设Estimators的结构"><a href="#预设Estimators的结构" class="headerlink" title="预设Estimators的结构"></a>预设Estimators的结构</h2><h3 id="一个或多个数据输入函数-dataset-importing-function"><a href="#一个或多个数据输入函数-dataset-importing-function" class="headerlink" title="一个或多个数据输入函数(dataset importing function)"></a>一个或多个数据输入函数(dataset importing function)</h3><p>比如我们也许可以创建一个函数导入训练集，使用其他函数来导入测试数据集。对于这种输入函数（dataset importing function）必须返回两个对象：</p>
<pre><code>* 一个字典（dictionary），键（keys）是特征名称，值（values）是一个包含相应特征值的Tensor或者SparseTensors
* 一个包含一个或多个labels的Tensor
</code></pre><p>如下：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">input_fn</span><span class="params">(dataset)</span>:</span></div><div class="line">   ...  <span class="comment"># manipulate dataset, extracting feature names and the label</span></div><div class="line">   <span class="keyword">return</span> feature_dict, label</div></pre></td></tr></table></figure></p>
<h3 id="定义特征列（feature-columns）"><a href="#定义特征列（feature-columns）" class="headerlink" title="定义特征列（feature columns）"></a>定义特征列（feature columns）</h3><p>每个tf.feature_column标识一个特征名（feature name），特征的类型（type）和任何输入预处理（pre-processing）。下面的代码段创建了三个特征列，可以保存整数或者单浮点数数据。其中前两个特征列简单的指定特征的名称和类型，第三个还指定了一个lambda表达式，用来处理元数据（raw data）:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># Define three numeric feature columns.</span></div><div class="line">population = tf.feature_column.numeric_column(<span class="string">'population'</span>)</div><div class="line">crime_rate = tf.feature_column.numeric_column(<span class="string">'crime_rate'</span>)</div><div class="line">median_education = tf.feature_column.numeric_column(<span class="string">'median_education'</span>,</div><div class="line">                    normalizer_fn=<span class="string">'lambda x: x - global_education_mean'</span>)</div></pre></td></tr></table></figure></p>
<h3 id="实例化相关的预设Estimators"><a href="#实例化相关的预设Estimators" class="headerlink" title="实例化相关的预设Estimators"></a>实例化相关的预设Estimators</h3><p>在TensorFlow中预设了很多Estimators，比如DNNClassifier,DNNLinearCombinedClassifier,DNNLinearCombinedRegressor等等。这些Estimators都可以很简单的就能够实例化：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># Instantiate an estimator, passing the feature columns.</span></div><div class="line">estimator = tf.estimator.Estimator.LinearClassifier(</div><div class="line">    feature_columns=[population, crime_rate, median_education],</div><div class="line">    )</div></pre></td></tr></table></figure>
<h3 id="调用训练，验证或者预测方法"><a href="#调用训练，验证或者预测方法" class="headerlink" title="调用训练，验证或者预测方法"></a>调用训练，验证或者预测方法</h3><p>所有的Estimator都提供了训练（train），验证（evaluate）和预测（predict）方法。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># my_training_set is the function created in Step 1</span></div><div class="line">estimator.train(input_fn=my_training_set, steps=<span class="number">2000</span>)</div></pre></td></tr></table></figure></p>
<h1 id="Custom-Estimators"><a href="#Custom-Estimators" class="headerlink" title="Custom Estimators"></a>Custom Estimators</h1><p>每个Estimator的核心都是其模型函数（model function）,这个方法用来建立用于训练、验证、预测的计算图。在预设Estimator中，模型函数已经预先设好。</p>
<h2 id="定制Estimators的结构"><a href="#定制Estimators的结构" class="headerlink" title="定制Estimators的结构"></a>定制Estimators的结构</h2><h3 id="实例化一个Estimator"><a href="#实例化一个Estimator" class="headerlink" title="实例化一个Estimator"></a>实例化一个Estimator</h3><p>与预设Estimator相比，当我们创建一个自己的Estimator时，其构造器需要更多的参数用来配置Estimator。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">nn = tf.estimator.Estimator(model_fn,</div><div class="line">                            model_dir=<span class="keyword">None</span>,</div><div class="line">                            config=<span class="keyword">None</span>,</div><div class="line">                            params=<span class="keyword">None</span>)</div></pre></td></tr></table></figure><br>Estimator对象包装由于model_fn指定的模型，该模型给定输入和其他参数，返回执行训练，评估或预测所需的操作。<br>所有的输出（checkpoints等）都被写入到model_dir中，或者其子目录中。<br>config参数可以传入一个RunCongfig对象，该对象包含运行环境的相关信息。如果model_fn中有个参数名为“config”，则会被传入到model_fn中。没传入该参数就意味着使用本地的默认设置。<br>params参数包含超参数（hyperparameters）。如果model_fn中有一个名为“params”的参数，则会被传入model_fn中。比如，学习率可以使用该方式传入model_fn中。</p>
<h3 id="model-fn的构造"><a href="#model-fn的构造" class="headerlink" title="model_fn的构造"></a>model_fn的构造</h3><p>模型函数的基本结构如下：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">model_fn</span><span class="params">(features, labels, mode, params,config)</span>:</span></div><div class="line">   <span class="comment"># Logic to do the following:</span></div><div class="line">   <span class="comment"># 1. Configure the model via TensorFlow operations</span></div><div class="line">   <span class="comment"># 2. Define the loss function for training/evaluation</span></div><div class="line">   <span class="comment"># 3. Define the training operation/optimizer</span></div><div class="line">   <span class="comment"># 4. Generate predictions</span></div><div class="line">   <span class="comment"># 5. Return predictions/loss/train_op/eval_metric_ops in EstimatorSpec object</span></div><div class="line">   <span class="keyword">return</span> EstimatorSpec(mode, predictions, loss, train_op, eval_metric_ops)</div></pre></td></tr></table></figure><br>features：从input_fn中返回的第一个返回值，可以被用来训练，验证和预测。该参数可以是单个Tensor也可以是一个字典。<br>labels：从input_fn中返回的第二个返回值。该参数可以是单个Tensor也可以是一个字典。如果model为ModeKeys.PREDICT，此时labels被设置为None。<br>model：可选的参数。指明该方法是用来训练、验证还是预测。其值为tf.estimator.ModeKeys中的一个。</p>
<ul>
<li>如果Estimator调用train()方法，则model_fn接受到的值为tf.estimator.ModeKeys.TRAIN。</li>
<li>如果Estimator调用evaluate()方法，则model_fn接受到的值为tf.estimator.ModeKeys.EVAL。</li>
<li>如果Estimator调用predict()方法，则model_fn接受到的值为tf.estimator.ModeKeys.PREDICT。</li>
</ul>
<p>此方法的内部将要完成一下任务：</p>
<ul>
<li>配置模型</li>
<li>定义损失函数</li>
<li>定义训练操作，指定optimizer最小化损失函数。</li>
</ul>
<p>该方法必须返回一个tf.estimator.EstimatorSpec对象，EstimatorSpec完全定义了由Estimator运行的模型。<br>EstimatorSpec构建如下：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">__new__(</div><div class="line">    cls,</div><div class="line">    mode,</div><div class="line">    predictions=<span class="keyword">None</span>,</div><div class="line">    loss=<span class="keyword">None</span>,</div><div class="line">    train_op=<span class="keyword">None</span>,</div><div class="line">    eval_metric_ops=<span class="keyword">None</span>,</div><div class="line">    export_outputs=<span class="keyword">None</span>,</div><div class="line">    training_chief_hooks=<span class="keyword">None</span>,</div><div class="line">    training_hooks=<span class="keyword">None</span>,</div><div class="line">    scaffold=<span class="keyword">None</span>,</div><div class="line">    evaluation_hooks=<span class="keyword">None</span></div><div class="line">)</div></pre></td></tr></table></figure><br>    注：__new__(cls,[...])是一个在对象实例化的时候调用的第一个方法。它的第一个参数是这个类，其他的参数是用来直接传递给__init__方法的。<br>其中：</p>
<ul>
<li>mode：与model_fn这种的model相同，一个ModeKeys。</li>
<li>predictions：预测得到的Tensor或者Tensor的字典。</li>
<li>loss：代表损失值的Tensor，必须是一个标量（scalar）或者其shape为[1]。</li>
<li>train_op：训练操作，比如对损失函数的优化器</li>
<li>eval_metric_ops：一个可以在验证模式中运行的度量键值对。当运行evaluate()方法时，可以直接使用键值对中的键来获取其值。</li>
<li>export_outputs：描述要导出到SavedModel的输出签名（output signatures），在服务运行期间使用。此处需要一个{name:output}字典：<ul>
<li>name：此次输出的任意名称。</li>
<li>output：一个ExportOutput对象。</li>
</ul>
</li>
<li>training_chief_hooks：</li>
<li>training_hooks：</li>
<li>scaffold：一个tf.train.Scaffold对象，可以在初始化，保存和训练中使用。</li>
<li>evaluation_hooks：在验证期间运行的tf.train.SessionRunHook对象。</li>
</ul>
<p>基于mode的值，EstimatorSpec需要不同的值。</p>
<ul>
<li>当mode == ModeKeys.TRAIN时：需要loss与train_op</li>
<li>当mode == ModeKeys.EVAL时：需要loss</li>
<li>当mode == ModeKeys.PREDICT时：需要predictions</li>
</ul>
<h3 id="配置神经网络结构"><a href="#配置神经网络结构" class="headerlink" title="配置神经网络结构"></a>配置神经网络结构</h3><p>配置神经网络需要创建并连接输入层、隐藏层和输出层。<br>输出层是一系列的接受特征值的节点，这些特征值通过model_fn中的features参数传入。<br>输入层之后必须通过激活函数与一个或多个隐藏层相连。最后一层隐藏层会与输出层相连。<br>tf.layers提供了tf.layers.dense函数去构建一个全连接网络。其激活函数被activation参数控制。<br>其中可以使用的激活函数有：</p>
<ul>
<li>tf.nn.relu</li>
<li>tf.nn.relu6</li>
<li>None，此时输出会直接作为下一层的输入。<br>此外，可以使用tf.layers.conv2d()进行卷积操作。</li>
</ul>
<h3 id="定义损失函数"><a href="#定义损失函数" class="headerlink" title="定义损失函数"></a>定义损失函数</h3><p>上面提到model_fn函数返回的EstimatorSpec中必须含有一个loss，一个代表损失值的Tensor。<br>tf.losses模块提供了各种方便计算损失值的函数：</p>
<ul>
<li>absolute_difference(labels,predictions)。使用L1正则项计算损失值。</li>
<li>log_loss(labels,predictions)。使用逻辑损失函数计算损失函数，一般用于逻辑回归。</li>
<li>mean_squared_error(labels,predictions)。均方误差。</li>
</ul>
<h3 id="定义训练操作"><a href="#定义训练操作" class="headerlink" title="定义训练操作"></a>定义训练操作</h3><p>训练操作定义了TensorFlow在将模型拟合到训练数据时将使用的优化算法。一般来说，是使损失值最小化。<br>一个创建训练操作最简单的方式就是实例化tf.train.Optimizer的子类，并调用其minimize方法。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">optimizer = tf.train.GradientDescentOptimizer(</div><div class="line">    learning_rate=params[<span class="string">"learning_rate"</span>])</div><div class="line">train_op = optimizer.minimize(</div><div class="line">    loss=loss, global_step=tf.train.get_global_step())</div></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> 机器学习 </category>
            
            <category> TensorFlow </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 机器学习 </tag>
            
            <tag> TensorFlow </tag>
            
            <tag> Estimator </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[残差网络ResNet]]></title>
      <url>/2017/10/19/%E6%AE%8B%E5%B7%AE%E7%BD%91%E7%BB%9CResNet/</url>
      <content type="html"><![CDATA[<h1 id="深度残差学习（Deep-Residual-Learning）"><a href="#深度残差学习（Deep-Residual-Learning）" class="headerlink" title="深度残差学习（Deep Residual Learning）"></a>深度残差学习（Deep Residual Learning）</h1><h2 id="残差学习（Residual-Learning）"><a href="#残差学习（Residual-Learning）" class="headerlink" title="残差学习（Residual Learning）"></a>残差学习（Residual Learning）</h2><p>对于深度卷积神经网络来说，网络的深度对于模型训练的结果来说至关重要，特别是在图像识别领域。那么由此就产生一个问题：简单的堆积层（layer）可以使网络学习的更好吗？<br><a id="more"></a><br>当一个更深的网络能够开始收敛（converging）时，就会暴露一个退化（degradation）问题：随着网络深度的增加，网络的精度会达到饱和，然后精度就会急速降低。而且，这种退化不是由过拟合（overfitting）引起的，继续向一个适当层数的网络中添加层就会导致更高的训练错误，如下图所示。（为什么？）<br><img src="/2017/10/19/残差网络ResNet/1.png" alt="1.png" title=""><br>训练精度的退化表明不是所有系统都是那么容易优化的。而深度参差学习（deep residual learning）框架可以解决这个退化问题。<br>ResNet通过恒等映射（identity mapping）将一个深层网络退化为一个浅层网络，从而获得更高的训练精度。如果假设多层非线性层（nonlinear layers）可以渐进的拟合复杂函数，这就相当于假设多层非线性层就可以渐进的拟合残差函数（residual function）。从<em>学习恒等映射</em>这点来看，期望映射是H(x)，残差映射为F(x)，其中x为网络第一层的输入，此时F(x)=H(x)-x，则期望输出H(x)=F(x)-x。当F(x)=0时，此时的网络就会退化为一个浅层网络，提高了训练的精度，同时，在极端情况下，当恒等映射达到最优时，网络学习F(x)=0比直接学习F(x)=x要简单很多。从<em>学习残差映射</em>这点来说，根据H(x)=F(x)+x，引入残差之后的映射对输出的变化更加敏感，因为恒等映射将输出的相同部分去掉了，由残差映射F(x)表示变化的部分，而灵敏度大则更利于反向传播时对参数的调整。一个残差学习模块如下：<br><img src="/2017/10/19/残差网络ResNet/2.png" alt="2.png" title=""><br>可以看到恒等映射既没有添加额外的参数，也没有增加计算的复杂度。  </p>
<h2 id="恒等映射（Identity-Mapping）"><a href="#恒等映射（Identity-Mapping）" class="headerlink" title="恒等映射（Identity Mapping）"></a>恒等映射（Identity Mapping）</h2><p>我们将一个构造模块的定义如下：<br><img src="/2017/10/19/残差网络ResNet/3.png" alt="3.png" title=""><br>其中x,y分别表示输入、输出向量。函数F表示要学习的残差映射。F+x的操作被一个快捷连接（shortcut connection）和一个矩阵加法执行。<br>式中x与F必须有相同的维度，如果没有的话，我们可以通过在快接连接上执行一个线性投影（linear projection）Ws来匹配维度：<br><img src="/2017/10/19/残差网络ResNet/4.png" alt="4.png" title=""><br>在实验中已经验证恒等映射足够解决退化问题，所以线性投影只用来匹配维度。<br>在卷积操作中，F+x的操作是作用在两个特征图之间，而且是对应通道间。</p>
<h1 id="相关工作"><a href="#相关工作" class="headerlink" title="相关工作"></a>相关工作</h1><h2 id="残差表示（Residual-Representations）"><a href="#残差表示（Residual-Representations）" class="headerlink" title="残差表示（Residual Representations）"></a>残差表示（Residual Representations）</h2><p>在图像识别领域，VLAD是一种用残差向量（residual vectors）对字典(dictionary)进行编码的表示方法。Fisher Vector可以被看做是VLAD的概率版本。这两种算法在图像检索和分类领域都是强有力的浅层表示方法。对于向量量化，编码残差向量比编码原向量更加高效。（未完）</p>
]]></content>
      
        <categories>
            
            <category> 机器学习 </category>
            
            <category> 深度学习 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 机器学习 </tag>
            
            <tag> 图像处理 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[DehazeNet及其他]]></title>
      <url>/2017/10/12/DehazeNet%E5%8F%8A%E5%85%B6%E4%BB%96/</url>
      <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>DehazeNet是一个端对端（End-to-End）的单张图片去雾系统。<br><a id="more"></a><br>单图像去雾处理是一个挑战ill-posed的问题，已有的方法使用不同的约束或者先验来达到似是而非的去雾效果。图像去雾的难度在于，雾的透射率依赖于雾的深度，而雾的深度在图片中是未知的并且不同位置的雾有不同的深度，而且单张图片的去雾因为有雾区域的判断而尤为艰难。<br>去雾的关键是从输入的有雾图片中估计出图片对应的透射图（medium transmisson map）。而DehazeNet就是一个端对端的可训练的图像去雾系统，使用DehazeNet来估计图片的透射图，使用该透射图对有雾图片逐个像素点恢复，使其恢复成无雾图片。<br>DehazeNet是一个基于深度网络模型的卷积神经网络，其中的层（layers）被特别设计来体现了在图像去雾中既定的假设/先验（assumptions/priors）。其中Maxout层被用来做与雾相关的特征提取。同时，使用一个特别的非线性的激活函数BReLU(bilateral rectified linear unit)来提升恢复图片的质量。  </p>
<h1 id="相关内容"><a href="#相关内容" class="headerlink" title="相关内容"></a>相关内容</h1><h2 id="大气散射模型（Atmospheric-Scattering-Model）"><a href="#大气散射模型（Atmospheric-Scattering-Model）" class="headerlink" title="大气散射模型（Atmospheric Scattering Model）"></a>大气散射模型（Atmospheric Scattering Model）</h2><p>大气散射模型是McCartney为了描述有雾图片信息提出的模型，后进一步被Narasimhan和Nayar发展得来。该模型可以写为：<br><img src="/2017/10/12/DehazeNet及其他/asm.png" alt="asm.png" title=""><br>其中I(x)是观察到的有雾图片，J(x)是对应的无雾图片，t(x)表示透射率，A表示自然光（此处向量对应多通道图片），x表示有雾图片中的像素。<br>其中J(x)t(x)被称为直接衰减（direct attenuation）,描述了真实画面在介质中的衰减。A(1-t(x))被称为空气光(airlight)，表示因散射光引起的场景颜色变化。<br>大气是同质时，t可以被表示为<br><img src="/2017/10/12/DehazeNet及其他/t.png" alt="t.png" title=""><br>其中β表示大气散射系数，d(x)表示场景到相机的距离。显然，当d(x)趋于无穷时，t(x)接近于零，此时A等于I(x)。但是，在实际的照片中距离不可能趋近于无穷，而是一个很远的距离，此时的透射率为一个很小的只t0。此时，可以求出较为稳定的α，即自然光。表示如下：<br><img src="/2017/10/12/DehazeNet及其他/a.png" alt="a.png" title="">  </p>
<h2 id="与雾相关的特征（Haze-Relevant-Features）"><a href="#与雾相关的特征（Haze-Relevant-Features）" class="headerlink" title="与雾相关的特征（Haze-Relevant Features）"></a>与雾相关的特征（Haze-Relevant Features）</h2><p>基于经验观察，已存的去雾方法使用了不同的假设或先验来计算与雾相关的特征。然后通过这些特征来达到去雾的效果。  </p>
<h3 id="暗通道（Dark-Channel）"><a href="#暗通道（Dark-Channel）" class="headerlink" title="暗通道（Dark Channel）"></a>暗通道（Dark Channel）</h3><p>暗通道先验是基于室外图片的经验观察得来的。在大多数室外无雾图片中，至少存在一个颜色通道其中的某些像素的强度值很多低，甚至接近于零。表示如下：<br><img src="/2017/10/12/DehazeNet及其他/dc.png" alt="dc.png" title=""><br>其中Jc是J的一个颜色通道（RGB），Ω(x)表示以x为中心的一块区域。<br>暗通道特征可以直接用来估计透射率 t(x) 正相关于 1-Jdark(x)。</p>
<h3 id="最大对比度（Maximumm-Contrast）"><a href="#最大对比度（Maximumm-Contrast）" class="headerlink" title="最大对比度（Maximumm Contrast）"></a>最大对比度（Maximumm Contrast）</h3><p>因为大气散射，图片的对比度会随着图片的可见度的减小而减小：<br><img src="/2017/10/12/DehazeNet及其他/v.png" alt="v.png" title=""><br>梯度的和表示图片的清晰度，此时t<1。基于这个发现： <img="" src="/2017/10/12/DehazeNet及其他/c.png" alt="c.png" title=""><br>C(x)表示在rxr的区域中的局部对比度最大值。显然对比度特征与透射率之间存在联系，所以图片可以通过最大化对比度来提高可见度。  </1。基于这个发现：></p>
<h3 id="颜色衰减（Color-Attenuation）"><a href="#颜色衰减（Color-Attenuation）" class="headerlink" title="颜色衰减（Color Attenuation）"></a>颜色衰减（Color Attenuation）</h3><p>受到雾的影响，图片的饱和度急剧降低，同时图片的亮度会升高。再根据上面提到的对比度先验，可以根据图片饱和度和亮度的不同来估计雾的浓度：<br><img src="/2017/10/12/DehazeNet及其他/ca.png" alt="ca.png" title=""><br>其中 Iv(x)和Is(x)可以在HSV色彩空间中表示。HSV色彩空间可以通过RGB色彩空间转换获得。<br>颜色衰减特征与d(x)存在正相关关系，也可以用来估计透射率。</p>
<h3 id="色差（Hue-Disparity）"><a href="#色差（Hue-Disparity）" class="headerlink" title="色差（Hue Disparity）"></a>色差（Hue Disparity）</h3><p>原图与其半反像（semi-inverse image）之间的色差可以被用来探测是否是雾。其中半反像：<br><img src="/2017/10/12/DehazeNet及其他/si.png" alt="si.png" title=""><br>对于无雾图来说，是三个通道的半反像中的像素值不都是全反的，导致半反像与原图间的巨大色差。所以色差被表示为：<br><img src="/2017/10/12/DehazeNet及其他/hd.png" alt="hd.png" title=""><br>其中h表示HSV色彩空间中的色彩（hue）通道。所以，透射率与色差之间存在负相关关系。</p>
<h1 id="DehazeNet的层设计"><a href="#DehazeNet的层设计" class="headerlink" title="DehazeNet的层设计"></a>DehazeNet的层设计</h1><p>DehazeNet由级联的卷积层和池化层组成，同时使用适当的非线性激活函数。结构如下：<br><img src="/2017/10/12/DehazeNet及其他/net.png" alt="net.png" title=""><br>分别为：特征提取，多尺度映射，局部极值，非线性回归。</p>
<h2 id="特征提取（Feature-Extration）"><a href="#特征提取（Feature-Extration）" class="headerlink" title="特征提取（Feature Extration）"></a>特征提取（Feature Extration）</h2><p>因为已存的去雾方法基于不同的假设在图片上密集提取与雾相关的特征，密集提取特征相当于在有雾图片上使用适当的卷积核进行卷积操作，然后进行非线性映射。<br>根据这些与雾相关特征的色彩通道的极端处理，使用Maxout单元来进行非线性映射，用以降低输出维度。Maxout单元是用在卷积神经网络中的简单前向传播非线性激活函数。它会通过对k（在该系统中为4）个仿射特征图进行像素最大化操作来产生一个新的特征图。基于Maxout单元，DehazeNet的第一层设计为：<br><img src="/2017/10/12/DehazeNet及其他/maxout.png" alt="maxout.png" title=""><br>Maxout单元示意如下：<br><img src="/2017/10/12/DehazeNet及其他/maxout2.png" alt="maxout2.png" title=""><br><img src="/2017/10/12/DehazeNet及其他/maxout3.png" alt="maxout3.png" title=""><br>相当于原本卷积之后的输出作为隐隐层。<br>Maxout单元将自动学习与雾相关的特征而不是通过已存方法的启发式方法。  </p>
<h2 id="多尺度映射（Multi-Scale-Mapping）"><a href="#多尺度映射（Multi-Scale-Mapping）" class="headerlink" title="多尺度映射（Multi-Scale Mapping）"></a>多尺度映射（Multi-Scale Mapping）</h2><p>多尺度特征已经在去雾中被证明有效。比如在GoogleNet中的inception结构中，并行的使用不同的卷积核进行卷积，能更好的定位输入图片中的边缘对象。在DehazeNet中使用三组卷积核：3x3,5x5,7x7，每种卷积核使用相同的数量进行卷积。所以第二层结构为：<br><img src="/2017/10/12/DehazeNet及其他/msm.png" alt="msm.png" title="">  </p>
<h2 id="局部极值（Local-Extremum）"><a href="#局部极值（Local-Extremum）" class="headerlink" title="局部极值（Local Extremum）"></a>局部极值（Local Extremum）</h2><p>在卷积神经网络的经典结构中，通过考虑每个像素邻域的最大值来克服局部敏感度。此外，基于区域透射率是不变这个假设，局部极值可以克服透射率估计的噪音。DehazeNet第三层：<br><img src="/2017/10/12/DehazeNet及其他/le.png" alt="le.png" title=""><br>与卷积神经网络中的最大池化相比，局部极值可以保证图片的分辨率。  </p>
<h2 id="非线性回归（Non-Linear-Regression）"><a href="#非线性回归（Non-Linear-Regression）" class="headerlink" title="非线性回归（Non-Linear Regression）"></a>非线性回归（Non-Linear Regression）</h2><p>一般的分线性回归激活函数包括Sigmoid和ReLU。其中Sigmoid很容易造成梯度消失，从而使网络收敛很慢，或者取得很差的局部最优解。而ReLU被设计用来解决分类问题，不能很好的应用于回归问题。特别是ReLU当数值小于0时才会抑制数值，这就很容易导致DehazeNet最后一层的溢出（因为透射率在0与1之间）。<br>因此，在DehazeNet中使用了BReLU，图像如下：<br><img src="/2017/10/12/DehazeNet及其他/brelu.png" alt="brelu.png" title=""><br>这样就将透射率t限制在tmin与tmax之间，同时又防止了梯度消失。  </p>
<h1 id="与传统去雾算法的联系"><a href="#与传统去雾算法的联系" class="headerlink" title="与传统去雾算法的联系"></a>与传统去雾算法的联系</h1><p>在DehazeNet的第一层中，使用卷积来实现特征提取。比如暗通道特征，因为是去通道中的最小值，而激活函数是Maxout，是取最大值，则如果卷积核是反向卷积核（中间的值为-1，其余值为0）则就会取到最小值，实现提取暗通道特征。<br>当卷积中使用全通卷积核和反向卷积核就会得到最大特征图和最小特征图，此时就可以将RGB色彩空间转换到HSV色彩空间（两个色彩空间的转换使用到了最大值和最小值），然后就可以将颜色衰减特征和色差特征提取。<br>照片中的白色物体与浓雾区域非常相似，通常都有高亮度值和低饱和度。在大多数雾估计模型中都把白色物体看的很远，导致透射率估计不准确。基于区域景深不变的假设，局部极值克服了这一问题。<br>自然光的估计是根据雾最强的地方，反光最强这个特性。在暗通道优先的方法中，在暗通道中选前0.1%最亮的像素，这些最亮的点就是雾最浓的点，在这些像素中取强度最高的像素，选这个像素作为自然光。根据此方法，在DehazeNet中，取透射率最低的前0.1%的点，因为雾最浓的地方，透射率最低，然后将这些点映射到灰度图上，因为灰度图的像素点可以直接表示光的强度，从灰度图上去最亮的像素作为自然光。</p>
<h1 id="训练"><a href="#训练" class="headerlink" title="训练"></a>训练</h1><h2 id="训练数据"><a href="#训练数据" class="headerlink" title="训练数据"></a>训练数据</h2><p>在去雾训练中很难收集到有雾和无雾的对应的照片。所以在DehazeNet中使用合成的照片进行训练。照片的合成基于两个假设：1,照片内容是透射率独立的，即相同的照片可以显示任意的透射率。2，透射率在一定区域内是不变的。照片合成后从这些照片中随机采样，每个样例都是16x16。  </p>
<h2 id="训练方法"><a href="#训练方法" class="headerlink" title="训练方法"></a>训练方法</h2><p>在DehazeNet中，监督学习是为了获得RGB图片与透射率之间的映射关系，使用均方误差作为损失函数：<br><img src="/2017/10/12/DehazeNet及其他/mse.png" alt="mse.png" title="">  </p>
<h1 id="导向滤波"><a href="#导向滤波" class="headerlink" title="导向滤波"></a>导向滤波</h1><p>使用导向滤波算法精细化透射率图，因为DehazeNet得到的透射率图中的像素点为该区域的透射率，使用导向滤波计算出每个像素点的透射率。<br><img src="/2017/10/12/DehazeNet及其他/g.png" alt="g.png" title="">  </p>
<h1 id="实验"><a href="#实验" class="headerlink" title="实验"></a>实验</h1><img src="/2017/10/12/DehazeNet及其他/vs.png" alt="vs.png" title="">  
]]></content>
      
        <categories>
            
            <category> 机器学习 </category>
            
            <category> 深度学习 </category>
            
            <category> 卷积神经网络 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 机器学习 </tag>
            
            <tag> 图像处理 </tag>
            
            <tag> CNN </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Hello World]]></title>
      <url>/2017/05/11/hello-world/</url>
      <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p>
<a id="more"></a>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
      
        
    </entry>
    
  
  
    
    <entry>
      <title></title>
      <url>/README.html</url>
      <content type="html"><![CDATA[<p>This my blog,based on HEXO.</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[分类]]></title>
      <url>/categories/index.html</url>
      <content type="html"></content>
    </entry>
    
    <entry>
      <title><![CDATA[links]]></title>
      <url>/links/index.html</url>
      <content type="html"></content>
    </entry>
    
    <entry>
      <title><![CDATA[tags]]></title>
      <url>/tags/index.html</url>
      <content type="html"></content>
    </entry>
    
  
</search>
